"""Add extra user profile fields

Revision ID: 35acf8969db8
Revises: 
Create Date: 2025-07-23 07:48:26.174808

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '35acf8969db8'
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('comments')
    op.drop_index(op.f('ix_public_users_email'), table_name='users')
    op.drop_index(op.f('ix_public_users_username'), table_name='users')
    op.drop_table('users')
    op.drop_table('likes')
    op.drop_index(op.f('ix_public_notification_user_id'), table_name='notification')
    op.drop_table('notification')
    op.drop_table('posts')
    op.drop_table('follows')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('follows',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('follower_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('followed_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['followed_id'], ['users.id'], name=op.f('follows_followed_id_fkey')),
    sa.ForeignKeyConstraint(['follower_id'], ['users.id'], name=op.f('follows_follower_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('follows_pkey')),
    sa.UniqueConstraint('follower_id', 'followed_id', name=op.f('unique_follow'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('posts',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('post_type', postgresql.ENUM('DAILY', 'PHOTO', 'SPONTANEOUS', name='posttype'), autoincrement=False, nullable=False),
    sa.Column('image_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name='posts_author_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='posts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('notification',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('channel', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('read_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('notification_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('notification_pkey'))
    )
    op.create_index(op.f('ix_public_notification_user_id'), 'notification', ['user_id'], unique=False)
    op.create_table('likes',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('likes_post_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('likes_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('likes_pkey')),
    sa.UniqueConstraint('user_id', 'post_id', name=op.f('unique_user_post_like'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('users',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('full_name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('bio', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('avatar_url', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('is_verified', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('hashed_password', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_public_users_username'), 'users', ['username'], unique=True)
    op.create_index(op.f('ix_public_users_email'), 'users', ['email'], unique=True)
    op.create_table('comments',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('author_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('post_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('parent_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], name=op.f('comments_author_id_fkey')),
    sa.ForeignKeyConstraint(['parent_id'], ['comments.id'], name=op.f('comments_parent_id_fkey')),
    sa.ForeignKeyConstraint(['post_id'], ['posts.id'], name=op.f('comments_post_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('comments_pkey'))
    )
    # ### end Alembic commands ###
